{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/app/api/changePassword/route.ts"],"sourcesContent":["import { google } from \"googleapis\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst SHEET_ID = process.env.SHEET_ID || \"\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { userId, currentPassword, newPassword } = await req.json();\r\n\r\n    if (!userId || !currentPassword || !newPassword) {\r\n      return NextResponse.json({ error: \"ÂøÖË¶Å„Å™ÊÉÖÂ†±„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô\" }, { status: 400 });\r\n    }\r\n\r\n    const auth = new google.auth.GoogleAuth({\r\n      credentials: {\r\n        type: \"service_account\",\r\n        project_id: process.env.GOOGLE_PROJECT_ID,\r\n        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n        client_email: process.env.GOOGLE_CLIENT_EMAIL,\r\n      },\r\n      scopes: [\"https://www.googleapis.com/auth/spreadsheets\"],\r\n    });\r\n\r\n    const sheets = google.sheets({ version: \"v4\", auth });\r\n\r\n    // üîπ `Users` „Ç∑„Éº„Éà„Åã„Çâ `userId` „Å® `Password` „ÇíÂèñÂæó\r\n    const response = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: SHEET_ID,\r\n      range: \"Users!A:C\", // AÂàó: userId, BÂàó: „É¶„Éº„Ç∂„ÉºÂêç, CÂàó: Password\r\n    });\r\n\r\n    const rows = response.data.values || [];\r\n    const userRowIndex = rows.findIndex((row) => row[0] === userId);\r\n\r\n    if (userRowIndex === -1) {\r\n      return NextResponse.json({ error: \"„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\" }, { status: 404 });\r\n    }\r\n\r\n    const storedPassword = rows[userRowIndex][2]; // CÂàóÔºà3Áï™ÁõÆÔºâ\r\n\r\n    if (storedPassword !== currentPassword) {\r\n      return NextResponse.json({ error: \"ÁèæÂú®„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô\" }, { status: 403 });\r\n    }\r\n\r\n    // üîπ Êñ∞„Åó„ÅÑ„Éë„Çπ„ÉØ„Éº„Éâ„Çí„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å´Êõ¥Êñ∞\r\n    await sheets.spreadsheets.values.update({\r\n      spreadsheetId: SHEET_ID,\r\n      range: `Users!C${userRowIndex + 1}`,\r\n      valueInputOption: \"RAW\",\r\n      requestBody: { values: [[newPassword]] },\r\n    });\r\n\r\n    return NextResponse.json({ message: \"‚úÖ „Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂ§âÊõ¥„Åï„Çå„Åæ„Åó„Åü\" }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"‚ùå „Éë„Çπ„ÉØ„Éº„ÉâÂ§âÊõ¥ API „Ç®„É©„Éº:\", error);\r\n    return NextResponse.json({ error: (error as Error).message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,QAAQ,IAAI;AAElC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/D,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,aAAa;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,aAAa;gBACX,MAAM;gBACN,YAAY,QAAQ,GAAG,CAAC,iBAAiB;gBACzC,aAAa,QAAQ,GAAG,CAAC,kBAAkB,EAAE,QAAQ,QAAQ;gBAC7D,cAAc,QAAQ,GAAG,CAAC,mBAAmB;YAC/C;YACA,QAAQ;gBAAC;aAA+C;QAC1D;QAEA,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QAEnD,6CAA6C;QAC7C,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QACvC,MAAM,eAAe,KAAK,SAAS,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE,KAAK;QAExD,IAAI,iBAAiB,CAAC,GAAG;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,iBAAiB,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,UAAU;QAExD,IAAI,mBAAmB,iBAAiB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,0BAA0B;QAC1B,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;YACtC,eAAe;YACf,OAAO,CAAC,OAAO,EAAE,eAAe,GAAG;YACnC,kBAAkB;YAClB,aAAa;gBAAE,QAAQ;oBAAC;wBAAC;qBAAY;iBAAC;YAAC;QACzC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACzE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,AAAC,MAAgB,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}