{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/app/api/authenticateUser/route.ts"],"sourcesContent":["import { google } from \"googleapis\";\r\nimport { NextResponse } from \"next/server\"; // ✅ NextResponse をインポート\r\n\r\nconst SHEET_ID = process.env.SHEET_ID; // 環境変数からスプレッドシートIDを取得\r\n\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n      const { email, password } = await req.json();\r\n  \r\n      const auth = new google.auth.GoogleAuth({\r\n        credentials: {\r\n          type: \"service_account\",\r\n          project_id: process.env.GOOGLE_PROJECT_ID,\r\n          private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n          client_email: process.env.GOOGLE_CLIENT_EMAIL,\r\n        },\r\n        scopes: [\"https://www.googleapis.com/auth/spreadsheets.readonly\"],\r\n      });\r\n      \r\n  \r\n      const sheets = google.sheets({ version: \"v4\", auth });\r\n      const response = await sheets.spreadsheets.values.get({\r\n        spreadsheetId: SHEET_ID,\r\n        range: \"Users!A:C\",\r\n      });\r\n  \r\n      const rows = response.data.values || [];\r\n      const user = rows.find((row) => row[1] === email && row[2] === password);\r\n  \r\n      if (user) {\r\n        return NextResponse.json({ userId: user[0] });\r\n      } else {\r\n        return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n      }\r\n    } catch (error) {\r\n      return NextResponse.json({ error: error as Error }, { status: 500 });\r\n    }\r\n  }\r\n  "],"names":[],"mappings":";;;AAAA;AACA,kOAA4C,wBAAwB;;;AAEpE,MAAM,WAAW,QAAQ,GAAG,CAAC,QAAQ,EAAE,sBAAsB;AAGtD,eAAe,KAAK,GAAY;IACnC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,aAAa;gBACX,MAAM;gBACN,YAAY,QAAQ,GAAG,CAAC,iBAAiB;gBACzC,aAAa,QAAQ,GAAG,CAAC,kBAAkB,EAAE,QAAQ,QAAQ;gBAC7D,cAAc,QAAQ,GAAG,CAAC,mBAAmB;YAC/C;YACA,QAAQ;gBAAC;aAAwD;QACnE;QAGA,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QACnD,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QACvC,MAAM,OAAO,KAAK,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE,KAAK,SAAS,GAAG,CAAC,EAAE,KAAK;QAE/D,IAAI,MAAM;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ,IAAI,CAAC,EAAE;YAAC;QAC7C,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}