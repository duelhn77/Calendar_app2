{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/components/Modal.tsx"],"sourcesContent":["\"use client\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { EventData } from \"@/types/EventData\"; // ✅ `EventData` を正しくインポート\r\nimport Select from \"react-select\";\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (data: EventData) => Promise<void>;\r\n  onUpdate: (data: EventData, range: { start: Date; end: Date } | null) => Promise<void>;\r\n  onDelete: (id: string) => Promise<void>; // ✅ 削除用の関数を追加\r\n  selectedRange?: { start: Date; end: Date } | null;\r\n  selectedEvent?: EventData | null;\r\n}\r\n\r\ninterface Engagement {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport function Modal({ isOpen, onClose, onSubmit, onUpdate, onDelete, selectedRange, selectedEvent }: ModalProps) {\r\n  const [engagement, setEngagement] = useState<{ value: string; label: string } | null>(null);\r\n  const [engagements, setEngagements] = useState<Engagement[]>([]);\r\n  const [activity, setActivity] = useState(\"\");\r\n  const [activities, setActivities] = useState<{ engagement: string; activity_id: string; activity: string }[]>([]);\r\n  const [filteredActivities, setFilteredActivities] = useState<{ activity_id: string; activity: string }[]>([]);\r\n  const [location, setLocation] = useState<{ value: string; label: string } | null>(null);\r\n  const [locations, setLocations] = useState<{ value: string; label: string }[]>([]);\r\n  const [details, setDetails] = useState(\"\");\r\n\r\n  // ✅ エンゲージメントリストの取得\r\n  useEffect(() => {\r\n    const fetchEngagements = async () => {\r\n      try {\r\n        const userId = typeof window !== \"undefined\" ? localStorage.getItem(\"userId\") : null;\r\n        if (!userId) {\r\n          console.error(\"❌ ユーザーIDが取得できません！\");\r\n          return;\r\n        }\r\n  \r\n        const response = await fetch(`/api/fetchEngagements?userId=${encodeURIComponent(userId)}`);\r\n        if (!response.ok) throw new Error(\"エンゲージメントの取得に失敗しました\");\r\n  \r\n        const data = await response.json();\r\n        if (!Array.isArray(data)) {\r\n          console.error(\"❌ APIのレスポンスが配列ではありません:\", data);\r\n          return;\r\n        }\r\n  \r\n        const formattedEngagements = data.map((eng: { id?: string; name: string }, index: number) => ({\r\n          id: eng.id || index.toString(),\r\n          name: eng.name,\r\n        }));\r\n  \r\n        setEngagements(formattedEngagements);\r\n      } catch (error) {\r\n        console.error(\"❌ エンゲージメントの取得エラー:\", error);\r\n      }\r\n    };\r\n  \r\n    if (isOpen) {\r\n      fetchEngagements();\r\n    }\r\n  }, [isOpen]);\r\n  \r\n\r\n\r\n// ✅ Activities を取得\r\nuseEffect(() => {\r\n  const fetchActivities = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/fetchActivities\");\r\n      const data = await response.json();\r\n      console.log(\"✅ Activity データ:\", data);\r\n      setActivities(data);\r\n    } catch (error) {\r\n      console.error(\"❌ Activity の取得エラー:\", error);\r\n    }\r\n  };\r\n\r\n  if (isOpen) {\r\n    fetchActivities();\r\n  }\r\n}, [isOpen]);\r\n\r\n// ✅ Engagement に応じた Activity をフィルタリング\r\nuseEffect(() => {\r\n  const filtered = activities.filter(act => act.engagement === engagement?.value);\r\n\r\n  setFilteredActivities(filtered);\r\n}, [engagement, activities]);\r\n  \r\n\r\n  // ✅ `selectedEvent` のデータをセット\r\n  useEffect(() => {\r\n    if (selectedEvent) {\r\n      console.log(\"📌 選択されたイベント:\", selectedEvent);\r\n      setEngagement(selectedEvent.engagement ? { value: selectedEvent.engagement, label: selectedEvent.engagement } : null);\r\n      setActivity(selectedEvent.activity || \"\");\r\n      setLocation(selectedEvent.location ? { value: selectedEvent.location, label: selectedEvent.location } : null);\r\n      setDetails(selectedEvent.details || \"\");\r\n    } else {\r\n      // 新規作成時のデフォルト値\r\n      setEngagement(null);\r\n      setActivity(\"\");\r\n      setLocation(null);\r\n      setDetails(\"\");\r\n    }\r\n  }, [selectedEvent, engagements]);\r\n\r\n  // 🔹 作業場所リストの取得\r\n  useEffect(() => {\r\n    const fetchLocations = async () => {\r\n      try {\r\n        const response = await fetch(\"/api/fetchLocations\");\r\n        const data = await response.json();\r\n        console.log(\"✅ 取得した作業場所:\", data);\r\n        setLocations(data);\r\n      } catch (error) {\r\n        console.error(\"❌ 作業場所の取得エラー:\", error);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      fetchLocations();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h1>作業情報を入力</h1>\r\n        {selectedRange && (\r\n         <p>\r\n          📅 {new Date(selectedRange.start.getTime() - 9 * 60 * 60 * 1000).toLocaleTimeString(\"ja-JP\", { hour: \"2-digit\", minute: \"2-digit\" })} \r\n           ～ {new Date(selectedRange.end.getTime() - 9 * 60 * 60 * 1000).toLocaleTimeString(\"ja-JP\", { hour: \"2-digit\", minute: \"2-digit\" })}\r\n         </p>\r\n        )}\r\n\r\n\r\n         {/* エンゲージメント選択 */}\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>エンゲージメント</label><br />\r\n          <Select\r\n            options={engagements.map(eng => ({\r\n            value: eng.name,\r\n            label: eng.name\r\n            }))}\r\n            value={engagement}\r\n            onChange={(selectedOption) => setEngagement(selectedOption)}\r\n            styles={{\r\n              menuList: (provided) => ({\r\n                ...provided,\r\n                maxHeight: \"200px\", // 最大5つまで表示\r\n                overflowY: \"auto\",\r\n              }),\r\n              menu: (provided) => ({\r\n                ...provided,\r\n                zIndex: 9999, // 前面に表示\r\n              })\r\n            }}\r\n            placeholder=\"エンゲージメントを選択\"\r\n          />\r\n\r\n        </div >\r\n\r\n\r\n        {/* Activity の選択 (react-select) */}\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n        <label>Activity</label><br />\r\n        <Select\r\n          options={filteredActivities.map(act => ({\r\n            value: act.activity_id, // activity_id を value に設定\r\n            label: act.activity     // 表示されるラベル\r\n          }))}\r\n          value={filteredActivities.find(act => act.activity === activity) \r\n            ? { value: activity, label: activity } \r\n            : null}\r\n          onChange={(selectedOption) => setActivity(selectedOption?.label || \"\")}\r\n          styles={{\r\n            menuList: (provided) => ({\r\n              ...provided,\r\n              maxHeight: \"200px\", // 5つまで表示\r\n              overflowY: \"auto\",\r\n            }),\r\n            menu: (provided) => ({\r\n              ...provided,\r\n              zIndex: 9999, // 他の要素より前面に表示\r\n            })\r\n          }}\r\n          placeholder=\"Activityを選択\"\r\n        />\r\n        </div>    \r\n\r\n        <label>作業場所</label>\r\n        <Select\r\n            options={locations}\r\n            value={location} // ✅ location の型を `{ value: string; label: string } | null` に統一\r\n            onChange={(selectedOption) => setLocation(selectedOption)} // ✅ そのままセット\r\n            placeholder=\"作業場所を選択\"\r\n            styles={{\r\n              menuList: (provided) => ({\r\n                ...provided,\r\n                maxHeight: \"200px\", // 最大5つまで表示\r\n                overflowY: \"auto\",\r\n              }),\r\n              menu: (provided) => ({\r\n                ...provided,\r\n                zIndex: 9999, // 前面に表示\r\n              }),\r\n            }}\r\n        />\r\n\r\n\r\n        <label style={{ display: \"block\", marginTop:\"14px\",marginBottom: \"-15px\" }}>\r\n          作業内容\r\n        </label>\r\n        \r\n        <input\r\n           type=\"text\"\r\n           value={details}\r\n           onChange={(e) => setDetails(e.target.value)}\r\n           style={{\r\n             paddingTop: \"5px\", // 🔹 文字を少し下にずらす\r\n             paddingBottom: \"5px\",\r\n             height: \"30px\", // ✅ 適度な高さを設定\r\n          }}\r\n        />        \r\n        <button\r\n          onClick={() => {\r\n          console.log(\"✅ 追加・更新ボタンが押されました！\");\r\n\r\n        if (selectedEvent) {\r\n         if (!selectedRange) {\r\n          console.error(\"❌ 更新範囲が未定義です！\");\r\n         return;\r\n         }\r\n    \r\n         onUpdate({\r\n          id: selectedEvent?.id || \"\", // ✅ `id` をセット\r\n          userId: localStorage.getItem(\"userId\") || \"\", // ✅ `userId` をセット\r\n          engagement: engagement?.value ?? \"\",\r\n          activity,\r\n          location: location?.value || \"\",\r\n          details,\r\n          start: selectedRange?.start.toISOString() || \"\", // ✅ `start` をセット\r\n          end: selectedRange?.end.toISOString() || \"\" // ✅ `end` をセット\r\n        },selectedRange);\r\n        } else {\r\n         onSubmit({\r\n          id: \"\", // ✅ 新規作成時は `id` なし\r\n          userId: localStorage.getItem(\"userId\") || \"\", // ✅ `userId` をセット\r\n          engagement: engagement?.value ?? \"\",\r\n          activity,\r\n          location: location?.value || \"\",\r\n          details,\r\n          start: selectedRange?.start.toISOString() || \"\", // ✅ `start` をセット\r\n          end: selectedRange?.end.toISOString() || \"\" // ✅ `end` をセット\r\n        });\r\n        }\r\n        }}>\r\n\r\n          {selectedEvent ? \"更新\" : \"追加\"}\r\n        </button>\r\n\r\n\r\n{/* ✅ 予定があるときのみ「削除」ボタンを表示 */}\r\n{selectedEvent && (\r\n  <button\r\n    onClick={async () => {\r\n      console.log(\"🗑️ 削除ボタンが押されました！\");\r\n      await onDelete(selectedEvent.id); // ✅ `selectedEvent.id` を渡す\r\n\r\n    }}\r\n    style={{ backgroundColor: \"red\", color: \"white\", marginLeft: \"10px\" }}\r\n  >削除</button>\r\n)}\r\n\r\n        <button onClick={onClose}>キャンセル</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AAEA;;;AAHA;;;AAoBO,SAAS,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAc;;IAC/G,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA2C;IACtF,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmE,EAAE;IAChH,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA+C,EAAE;IAC5G,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA2C;IAClF,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAsC,EAAE;IACjF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,mBAAmB;IACnB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,MAAM;oDAAmB;oBACvB,IAAI;wBACF,MAAM,SAAS,uCAAgC,aAAa,OAAO,CAAC;wBACpE,IAAI,CAAC,QAAQ;4BACX,QAAQ,KAAK,CAAC;4BACd;wBACF;wBAEA,MAAM,WAAW,MAAM,MAAM,CAAC,6BAA6B,EAAE,mBAAmB,SAAS;wBACzF,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;wBAElC,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,IAAI,CAAC,MAAM,OAAO,CAAC,OAAO;4BACxB,QAAQ,KAAK,CAAC,0BAA0B;4BACxC;wBACF;wBAEA,MAAM,uBAAuB,KAAK,GAAG;qFAAC,CAAC,KAAoC,QAAkB,CAAC;oCAC5F,IAAI,IAAI,EAAE,IAAI,MAAM,QAAQ;oCAC5B,MAAM,IAAI,IAAI;gCAChB,CAAC;;wBAED,eAAe;oBACjB,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,qBAAqB;oBACrC;gBACF;;YAEA,IAAI,QAAQ;gBACV;YACF;QACF;0BAAG;QAAC;KAAO;IAIb,mBAAmB;IACnB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,MAAM;mDAAkB;oBACtB,IAAI;wBACF,MAAM,WAAW,MAAM,MAAM;wBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,QAAQ,GAAG,CAAC,mBAAmB;wBAC/B,cAAc;oBAChB,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,sBAAsB;oBACtC;gBACF;;YAEA,IAAI,QAAQ;gBACV;YACF;QACF;0BAAG;QAAC;KAAO;IAEX,sCAAsC;IACtC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,MAAM,WAAW,WAAW,MAAM;4CAAC,CAAA,MAAO,IAAI,UAAU,KAAK,YAAY;;YAEzE,sBAAsB;QACxB;0BAAG;QAAC;QAAY;KAAW;IAGzB,6BAA6B;IAC7B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,IAAI,eAAe;gBACjB,QAAQ,GAAG,CAAC,iBAAiB;gBAC7B,cAAc,cAAc,UAAU,GAAG;oBAAE,OAAO,cAAc,UAAU;oBAAE,OAAO,cAAc,UAAU;gBAAC,IAAI;gBAChH,YAAY,cAAc,QAAQ,IAAI;gBACtC,YAAY,cAAc,QAAQ,GAAG;oBAAE,OAAO,cAAc,QAAQ;oBAAE,OAAO,cAAc,QAAQ;gBAAC,IAAI;gBACxG,WAAW,cAAc,OAAO,IAAI;YACtC,OAAO;gBACL,eAAe;gBACf,cAAc;gBACd,YAAY;gBACZ,YAAY;gBACZ,WAAW;YACb;QACF;0BAAG;QAAC;QAAe;KAAY;IAE/B,gBAAgB;IAChB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,MAAM;kDAAiB;oBACrB,IAAI;wBACF,MAAM,WAAW,MAAM,MAAM;wBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,QAAQ,GAAG,CAAC,eAAe;wBAC3B,aAAa;oBACf,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,iBAAiB;oBACjC;gBACF;;YAEA,IAAI,QAAQ;gBACV;YACF;QACF;0BAAG;QAAC;KAAO;IAEX,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;8BAAG;;;;;;gBACH,+BACA,6LAAC;;wBAAE;wBACE,IAAI,KAAK,cAAc,KAAK,CAAC,OAAO,KAAK,IAAI,KAAK,KAAK,MAAM,kBAAkB,CAAC,SAAS;4BAAE,MAAM;4BAAW,QAAQ;wBAAU;wBAAG;wBACjI,IAAI,KAAK,cAAc,GAAG,CAAC,OAAO,KAAK,IAAI,KAAK,KAAK,MAAM,kBAAkB,CAAC,SAAS;4BAAE,MAAM;4BAAW,QAAQ;wBAAU;;;;;;;8BAMlI,6LAAC;oBAAI,OAAO;wBAAE,cAAc;oBAAO;;sCACjC,6LAAC;sCAAM;;;;;;sCAAgB,6LAAC;;;;;sCACxB,6LAAC,oLAAA,CAAA,UAAM;4BACL,SAAS,YAAY,GAAG,CAAC,CAAA,MAAO,CAAC;oCACjC,OAAO,IAAI,IAAI;oCACf,OAAO,IAAI,IAAI;gCACf,CAAC;4BACD,OAAO;4BACP,UAAU,CAAC,iBAAmB,cAAc;4BAC5C,QAAQ;gCACN,UAAU,CAAC,WAAa,CAAC;wCACvB,GAAG,QAAQ;wCACX,WAAW;wCACX,WAAW;oCACb,CAAC;gCACD,MAAM,CAAC,WAAa,CAAC;wCACnB,GAAG,QAAQ;wCACX,QAAQ;oCACV,CAAC;4BACH;4BACA,aAAY;;;;;;;;;;;;8BAOhB,6LAAC;oBAAI,OAAO;wBAAE,cAAc;oBAAO;;sCACnC,6LAAC;sCAAM;;;;;;sCAAgB,6LAAC;;;;;sCACxB,6LAAC,oLAAA,CAAA,UAAM;4BACL,SAAS,mBAAmB,GAAG,CAAC,CAAA,MAAO,CAAC;oCACtC,OAAO,IAAI,WAAW;oCACtB,OAAO,IAAI,QAAQ,CAAK,WAAW;gCACrC,CAAC;4BACD,OAAO,mBAAmB,IAAI,CAAC,CAAA,MAAO,IAAI,QAAQ,KAAK,YACnD;gCAAE,OAAO;gCAAU,OAAO;4BAAS,IACnC;4BACJ,UAAU,CAAC,iBAAmB,YAAY,gBAAgB,SAAS;4BACnE,QAAQ;gCACN,UAAU,CAAC,WAAa,CAAC;wCACvB,GAAG,QAAQ;wCACX,WAAW;wCACX,WAAW;oCACb,CAAC;gCACD,MAAM,CAAC,WAAa,CAAC;wCACnB,GAAG,QAAQ;wCACX,QAAQ;oCACV,CAAC;4BACH;4BACA,aAAY;;;;;;;;;;;;8BAId,6LAAC;8BAAM;;;;;;8BACP,6LAAC,oLAAA,CAAA,UAAM;oBACH,SAAS;oBACT,OAAO;oBACP,UAAU,CAAC,iBAAmB,YAAY;oBAC1C,aAAY;oBACZ,QAAQ;wBACN,UAAU,CAAC,WAAa,CAAC;gCACvB,GAAG,QAAQ;gCACX,WAAW;gCACX,WAAW;4BACb,CAAC;wBACD,MAAM,CAAC,WAAa,CAAC;gCACnB,GAAG,QAAQ;gCACX,QAAQ;4BACV,CAAC;oBACH;;;;;;8BAIJ,6LAAC;oBAAM,OAAO;wBAAE,SAAS;wBAAS,WAAU;wBAAO,cAAc;oBAAQ;8BAAG;;;;;;8BAI5E,6LAAC;oBACE,MAAK;oBACL,OAAO;oBACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;oBAC1C,OAAO;wBACL,YAAY;wBACZ,eAAe;wBACf,QAAQ;oBACX;;;;;;8BAEF,6LAAC;oBACC,SAAS;wBACT,QAAQ,GAAG,CAAC;wBAEd,IAAI,eAAe;4BAClB,IAAI,CAAC,eAAe;gCACnB,QAAQ,KAAK,CAAC;gCACf;4BACA;4BAEA,SAAS;gCACR,IAAI,eAAe,MAAM;gCACzB,QAAQ,aAAa,OAAO,CAAC,aAAa;gCAC1C,YAAY,YAAY,SAAS;gCACjC;gCACA,UAAU,UAAU,SAAS;gCAC7B;gCACA,OAAO,eAAe,MAAM,iBAAiB;gCAC7C,KAAK,eAAe,IAAI,iBAAiB,GAAG,eAAe;4BAC7D,GAAE;wBACF,OAAO;4BACN,SAAS;gCACR,IAAI;gCACJ,QAAQ,aAAa,OAAO,CAAC,aAAa;gCAC1C,YAAY,YAAY,SAAS;gCACjC;gCACA,UAAU,UAAU,SAAS;gCAC7B;gCACA,OAAO,eAAe,MAAM,iBAAiB;gCAC7C,KAAK,eAAe,IAAI,iBAAiB,GAAG,eAAe;4BAC7D;wBACA;oBACA;8BAEG,gBAAgB,OAAO;;;;;;gBAKjC,+BACC,6LAAC;oBACC,SAAS;wBACP,QAAQ,GAAG,CAAC;wBACZ,MAAM,SAAS,cAAc,EAAE,GAAG,2BAA2B;oBAE/D;oBACA,OAAO;wBAAE,iBAAiB;wBAAO,OAAO;wBAAS,YAAY;oBAAO;8BACrE;;;;;;8BAGK,6LAAC;oBAAO,SAAS;8BAAS;;;;;;;;;;;;;;;;;AAIlC;GAxQgB;KAAA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/components/ExportModal.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\ninterface ExportModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onExport: (startDate: string, endDate: string, format: string) => void;\r\n}\r\n\r\nconst ExportModal: React.FC<ExportModalProps> = ({ isOpen, onClose, onExport }) => {\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [format] = useState(\"xlsx\");\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      {/* ✅ オーバーレイを適用 */}\r\n      <div className=\"export-modal-overlay\" onClick={onClose}></div>\r\n\r\n      {/* ✅ モーダル本体 */}\r\n      <div className=\"export-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <h2>📥 データをエクスポート</h2>\r\n\r\n        <label>開始日</label>\r\n        <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n\r\n        <label>終了日</label>\r\n        <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n\r\n        <label>ファイル形式</label>\r\n        <Select\r\n          options={[\r\n            { value: \"xlsx\", label: \"Excel (.xlsx)\" },\r\n            { value: \"csv\", label: \"CSV (.csv)\" }\r\n          ]}\r\n          styles={{\r\n            menuList: (provided) => ({\r\n              ...provided,\r\n              maxHeight: \"150px\", // リストの最大高さ\r\n            }),\r\n          }}\r\n        />\r\n\r\n\r\n        <div className=\"export-modal-buttons\">\r\n          <button className=\"export-button\" onClick={() => onExport(startDate, endDate, format)}>📤 エクスポート</button>\r\n          <button className=\"export-button cancel\" onClick={onClose}>キャンセル</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExportModal;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;AAQA,MAAM,cAA0C,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;;IAC5E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE1B,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE;;0BAEE,6LAAC;gBAAI,WAAU;gBAAuB,SAAS;;;;;;0BAG/C,6LAAC;gBAAI,WAAU;gBAAe,SAAS,CAAC,IAAM,EAAE,eAAe;;kCAC7D,6LAAC;kCAAG;;;;;;kCAEJ,6LAAC;kCAAM;;;;;;kCACP,6LAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAW,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;;;;;;kCAEjF,6LAAC;kCAAM;;;;;;kCACP,6LAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAS,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;;;;;;kCAE7E,6LAAC;kCAAM;;;;;;kCACP,6LAAC,oLAAA,CAAA,UAAM;wBACL,SAAS;4BACP;gCAAE,OAAO;gCAAQ,OAAO;4BAAgB;4BACxC;gCAAE,OAAO;gCAAO,OAAO;4BAAa;yBACrC;wBACD,QAAQ;4BACN,UAAU,CAAC,WAAa,CAAC;oCACvB,GAAG,QAAQ;oCACX,WAAW;gCACb,CAAC;wBACH;;;;;;kCAIF,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAO,WAAU;gCAAgB,SAAS,IAAM,SAAS,WAAW,SAAS;0CAAS;;;;;;0CACvF,6LAAC;gCAAO,WAAU;gCAAuB,SAAS;0CAAS;;;;;;;;;;;;;;;;;;;;AAKrE;GA5CM;KAAA;uCA8CS","debugId":null}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/components/Sidebar.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { FaCog } from \"react-icons/fa\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport ExportModal from \"./ExportModal\";\r\n\r\nexport default function Sidebar() {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [isReportOpen, setIsReportOpen] = useState(false);\r\n  const [isExportOpen, setIsExportOpen] = useState(false);\r\n  const [userRole, setUserRole] = useState(\"\");\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const fetchUserRole = async () => {\r\n      const userId = localStorage.getItem(\"userId\");\r\n      if (!userId) return;\r\n\r\n      try {\r\n        const response = await fetch(`/api/getUserRole?userId=${userId}`);\r\n        const data = await response.json();\r\n\r\n        if (data.role) {\r\n          setUserRole(data.role);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"❌ ユーザー役職の取得エラー:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserRole();\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"isAuthenticated\");\r\n    router.push(\"/login\");\r\n  };\r\n\r\n  const handleChangePassword = () => {\r\n    router.push(\"/change-password\");\r\n  };\r\n\r\n  const handleExport = async (startDate: string, endDate: string, format: string) => {\r\n    console.log(`📥 エクスポート開始: ${startDate} ～ ${endDate}, フォーマット: ${format}`);\r\n  \r\n    try {\r\n      const response = await fetch(\"/api/exportData\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ startDate, endDate, format }) // ✅ `format` を確実に送信\r\n      });\r\n  \r\n      if (!response.ok) throw new Error(\"エクスポート処理に失敗しました\");\r\n  \r\n      const blob = await response.blob();\r\n      const downloadUrl = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = downloadUrl;\r\n      link.setAttribute(\"download\", `export.${format}`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n  \r\n      console.log(\"✅ エクスポート成功！\");\r\n  \r\n    } catch (error) {\r\n      console.error(\"❌ エクスポートエラー:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h1 className=\"sidebar-title\">Haleiwaシステム</h1>\r\n\r\n      <ul>\r\n        <li onClick={() => setIsReportOpen(!isReportOpen)}>\r\n          レポート\r\n        </li>\r\n\r\n        {isReportOpen && userRole === \"管理者\" && (\r\n          <button\r\n            className=\"export-button\"\r\n            onClick={() => setIsExportOpen(true)}\r\n            style={{ marginTop: \"10px\" }}\r\n          >\r\n            📤 Export\r\n          </button>\r\n        )}\r\n\r\n        {/* <li>🚀未実装</li>\r\n        <li>🚀未実装</li> */}\r\n      </ul>\r\n\r\n      {isExportOpen && (\r\n        <ExportModal \r\n          isOpen={isExportOpen}\r\n          onClose={() => setIsExportOpen(false)}\r\n          onExport={handleExport}\r\n        />\r\n      )}\r\n\r\n      <div className=\"settings\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\r\n        <FaCog size={20} />\r\n        <span>管理メニュー</span>\r\n      </div>\r\n\r\n      {isMenuOpen && (\r\n        <div className=\"menu-popup\">\r\n          <button className=\"pw-change-button\" onClick={handleChangePassword} style={{ marginTop: \"10px\" }}>\r\n            🔑 PW変更\r\n          </button>\r\n\r\n          <button className=\"logout-button\" onClick={handleLogout} style={{ marginTop: \"10px\" }}>\r\n            ログアウト\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hiros/OneDrive%20-%20%E6%88%90%E7%94%B0%E5%BC%98/Tech0/VS%20Code/Git_Clone_calendar_app/Calendar_app2/src/app/calendar/page.tsx"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { DateSelectArg, EventClickArg ,EventDropArg } from \"@fullcalendar/core\";\r\nimport { EventData } from \"@/types/EventData\";\r\nimport { Modal } from \"@/components/Modal\";\r\nimport Sidebar from \"@/components/Sidebar\";\r\nimport {  EventResizeDoneArg } from \"@fullcalendar/interaction\"; \r\nimport \"@/styles/calendar.css\"; \r\n\r\nexport default function CalendarPage() {\r\n  // const [isAuthenticated, setIsAuthenticated] = useState(\r\n  //   typeof window !== \"undefined\" && localStorage.getItem(\"isAuthenticated\") === \"true\"\r\n  // );\r\n  // const handleLogout = () => {\r\n\r\n  const router = useRouter();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedRange, setSelectedRange] = useState<{ start: Date; end: Date } | null>(null);\r\n  const [selectedEvent, setSelectedEvent] = useState<EventData | null>(null);\r\n  const [events, setEvents] = useState([]);\r\n  const [engagements, setEngagements] = useState<{ name: string; color: string }[]>([]);\r\n\r\n  // ✅ Google Sheets から予定データを取得\r\n  const fetchEventsFromSheets = async () => {\r\n    try {\r\n      const userId = localStorage.getItem(\"userId\") || \"\";\r\n      if (!userId) {\r\n        console.error(\"❌ ユーザーIDが取得できませんでした\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`/api/getEvents?userId=${encodeURIComponent(userId)}`);\r\n      if (!response.ok) throw new Error(\"スプレッドシートのデータ取得に失敗\");\r\n\r\n      const data = await response.json();\r\n      console.log(\"✅ /api/getEvents のレスポンス:\", data);\r\n\r\n      \r\n      setEvents(\r\n        data\r\n          .filter((event: EventData) => event.userId === userId) // ✅ ログインユーザーのデータのみ取得\r\n          .map((event: EventData) => {\r\n            const engagement = engagements.find((e) => e.name === event.engagement) || { color: \"#3788d8\" };\r\n            return{\r\n              id: event.id, // DataId\r\n              title: `${event.engagement} - ${event.activity}`,\r\n              start: new Date(event.start),\r\n              end: new Date(event.end),\r\n              backgroundColor: engagement?.color || \"#3788d8\", // ✅ スプレッドシートの色を適用\r\n              borderColor: engagement?.color || \"#3788d8\",\r\n              extendedProps: {\r\n                details: `${event.location} / ${event.details}`,\r\n              },\r\n            };\r\n          })\r\n      );\r\n    } catch (error) {\r\n      console.error(\"❌ スプレッドシートからのデータ取得エラー:\", error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  // ✅ 予定をスプレッドシートに保存\r\n  const handleAddEvent = async (data: EventData): Promise<void> => {\r\n    if (!selectedRange) {\r\n      console.error(\"❌ 選択された範囲がありません！\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const userId = localStorage.getItem(\"userId\") || \"\";\r\n      const userName = localStorage.getItem(\"userName\") || \"Unknown\";\r\n      const response = await fetch(\"/api/saveEvent\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          id: selectedEvent?.id || \"\",\r\n          userId,\r\n          userName,\r\n          start: selectedRange.start.toISOString(),\r\n          end: selectedRange.end.toISOString(),\r\n          engagement: data.engagement,\r\n          activity: data.activity,\r\n          location: data.location,\r\n          details: data.details,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"スプレッドシートへの保存に失敗\");\r\n\r\n      console.log(\"✅ スプレッドシートに保存完了\");\r\n      fetchEventsFromSheets();\r\n      setIsOpen(false);\r\n    } catch (error) {\r\n      console.error(\"❌ スプレッドシートへの保存エラー:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 予定をスプレッドシートで更新\r\n  const handleUpdateEvent = async (data: EventData, range: { start: Date; end: Date } | null): Promise<void> => {\r\n    if (!range || !selectedEvent) {\r\n      console.error(\"❌ 更新する範囲またはイベントが未定義です！\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"/api/updateEvent\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          id: selectedEvent.id, // DataId を使用\r\n          start: range.start.toISOString(),\r\n          end: range.end.toISOString(),\r\n          engagement: data.engagement,\r\n          activity: data.activity,\r\n          location: data.location,\r\n          details: data.details,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"スプレッドシートの更新に失敗\");\r\n\r\n      console.log(\"✅ スプレッドシートを更新完了\");\r\n      fetchEventsFromSheets();\r\n      setIsOpen(false);\r\n    } catch (error) {\r\n      console.error(\"❌ スプレッドシートの更新エラー:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 予定がクリックされたときにホップアップを表示\r\n  const handleEventClick = (clickInfo: EventClickArg) => {\r\n    console.log(\"📅 クリックされたイベント:\", clickInfo.event);\r\n  \r\n    setSelectedEvent({\r\n      id: clickInfo.event.id || \"\",\r\n      userId: clickInfo.event.extendedProps?.userId || \"\",\r\n      userName: clickInfo.event.extendedProps?.userName || \"Unknown\",\r\n      engagement: clickInfo.event.title.split(\" - \")[0] || \"\",\r\n      activity: clickInfo.event.title.split(\" - \")[1] || \"\",\r\n      location: clickInfo.event.extendedProps?.details?.split(\" / \")[0] || \"\",\r\n      details: clickInfo.event.extendedProps?.details?.split(\" / \")[1] || \"\",\r\n      start: clickInfo.event.start?.toISOString() || \"\",\r\n      end: clickInfo.event.end?.toISOString() || clickInfo.event.start?.toISOString() || \"\",\r\n    });\r\n  \r\n    // ✅ `null` の場合は `new Date()` を代入して型エラーを回避\r\n    setSelectedRange({\r\n      start: clickInfo.event.start ?? new Date(),\r\n      end: clickInfo.event.end ?? clickInfo.event.start ?? new Date(),\r\n    });\r\n  \r\n    setIsOpen(true);\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const handleDeleteEvent = async (id: string): Promise<void> => {\r\n    console.log(\"🗑️ 削除する予定の ID:\", id);\r\n  \r\n    try {\r\n      const response = await fetch(\"/api/deleteEvent\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ id }), // ✅ ID を送信\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(\"スプレッドシートの削除に失敗しました\");\r\n      }\r\n  \r\n      console.log(\"✅ スプレッドシートのデータを削除しました！\");\r\n      fetchEventsFromSheets(); // ✅ 削除後に最新のデータを取得\r\n      setIsOpen(false);\r\n    } catch (error) {\r\n      console.error(\"❌ 削除エラー:\", error);\r\n    }\r\n  };\r\n  \r\n  const handleEventResize = async (resizeInfo: EventResizeDoneArg) => {\r\n    console.log(\"✏️ 予定の時間が変更されました:\", resizeInfo.event);\r\n  \r\n    const updatedEvent = {\r\n      id: resizeInfo.event.id,\r\n      start: resizeInfo.event.start ?? new Date(), \r\n      end: resizeInfo.event.end ?? resizeInfo.event.start ?? new Date(),\r\n      engagement: resizeInfo.event.title.split(\" - \")[0] || \"\",\r\n      activity: resizeInfo.event.title.split(\" - \")[1] || \"\",\r\n      location: resizeInfo.event.extendedProps.details.split(\" / \")[0] || \"\",\r\n      details: resizeInfo.event.extendedProps.details.split(\" / \")[1] || \"\",\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(\"/api/updateEvent\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedEvent),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(\"スプレッドシートの更新に失敗しました\");\r\n      }\r\n  \r\n      console.log(\"✅ スプレッドシートのデータを更新しました\");\r\n      fetchEventsFromSheets(); // 🔹 最新のデータを取得\r\n    } catch (error) {\r\n      console.error(\"❌ スプレッドシートの更新エラー:\", error);\r\n    }\r\n  };\r\n  \r\n  const handleEventMove = async (eventDropInfo: EventDropArg) => {\r\n    console.log(\"📌 予定の移動:\", eventDropInfo);\r\n  \r\n    const { event } = eventDropInfo;\r\n    const updatedEvent = {\r\n      id: event.id, // ✅ DataId を取得\r\n      start: eventDropInfo.event.start ?? new Date(),\r\n      end: eventDropInfo.event.end ?? eventDropInfo.event.start ?? new Date(), // end がない場合は start と同じに\r\n    };\r\n  \r\n    console.log(\"✅ 更新するデータ:\", updatedEvent);\r\n  \r\n    try {\r\n      const response = await fetch(\"/api/updateEvent\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedEvent),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(\"スプレッドシートの更新に失敗\");\r\n      }\r\n  \r\n      console.log(\"✅ スプレッドシート更新完了\");\r\n      fetchEventsFromSheets(); // 🔹 更新後、最新の予定を取得\r\n    } catch (error) {\r\n      console.error(\"❌ スプレッドシートの更新エラー:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelect = (arg: DateSelectArg) => {\r\n    console.log(\"📅 選択された範囲:\", arg.start, arg.end);\r\n    setSelectedRange({ start: arg.start, end: arg.end });\r\n    setSelectedEvent(null);\r\n    setIsOpen(true);\r\n  };\r\n\r\n\r\n\r\n  // ✅ スプレッドシートから Engagement を取得\r\n  const fetchEngagements = async () => {\r\n    try {\r\n      const userId = typeof window !== \"undefined\" ? localStorage.getItem(\"userId\") : null;\r\n      if (!userId) {\r\n        console.error(\"❌ ユーザーIDが取得できません！\");\r\n        return;\r\n      }\r\n  \r\n      const response = await fetch(`/api/fetchEngagements?userId=${encodeURIComponent(userId)}`);\r\n      if (!response.ok) throw new Error(\"エンゲージメントの取得に失敗しました\");\r\n  \r\n      const data = await response.json();\r\n      if (!Array.isArray(data)) {\r\n        console.error(\"❌ APIのレスポンスが配列ではありません:\", data);\r\n        return;\r\n      }\r\n  \r\n      setEngagements(data);\r\n    } catch (error) {\r\n      console.error(\"❌ エンゲージメントの取得エラー:\", error);\r\n    }\r\n  };\r\n  \r\n    \r\n\r\n  // ✅ 初回レンダリング時に fetchEngagements を実行**\r\n  useEffect(() => {\r\n    fetchEngagements();\r\n  }, []); // 🔹 依存配列を `[]` にして初回のみ実行\r\n\r\n  // ✅ engagements が更新された後に fetchEventsFromSheets を実行**\r\n  useEffect(() => {\r\n    if (engagements.length > 0) {\r\n      fetchEventsFromSheets();\r\n    }\r\n  }, [engagements]); // 🔹 `engagements` が更新されたときに実行\r\n\r\n\r\n// ✅ エンゲージメントを取得したあとにイベントも取得\r\nuseEffect(() => {\r\n  if (engagements.length > 0) {\r\n    fetchEventsFromSheets();\r\n  }\r\n}, [engagements]);\r\n\r\n\r\n  \r\n // ✅ 初回読み込み時にスプレッドシートのデータを取得\r\nuseEffect(() => {\r\n  if (!localStorage.getItem(\"isAuthenticated\")) {\r\n    router.push(\"/login\");\r\n  } else {\r\n    fetchEngagements();\r\n  }\r\n}, [router]); // 🔹 `router` に依存するよう修正\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <Sidebar />\r\n      <div style={{ marginLeft: \"220px\", padding: \"20px\", width: \"100%\" }}>\r\n        <FullCalendar\r\n          plugins={[timeGridPlugin, interactionPlugin]}\r\n          initialView=\"timeGridWeek\"\r\n          slotMinTime=\"00:00:00\"\r\n          slotMaxTime=\"24:00:00\"\r\n          scrollTime=\"09:00:00\"   // デフォルト表示を 9:00 に\r\n          locale=\"ja\"\r\n          timeZone=\"Asia/Tokyo\"\r\n          slotDuration=\"00:15:00\"\r\n          slotLabelInterval=\"01:00:00\"\r\n          slotLabelFormat={{ hour: \"2-digit\", minute: \"2-digit\", hour12: false }}\r\n          selectable={true}\r\n          editable={true}\r\n          select={handleSelect}\r\n          events={events}\r\n          eventClick={handleEventClick}\r\n          eventDrop={handleEventMove}\r\n          eventResize={handleEventResize}\r\n          headerToolbar={{\r\n            left: \"prev,next today\",\r\n            center: \"title\",\r\n            right: \"timeGridWeek,timeGridDay\",\r\n          }}\r\n          height=\"900px\" // ✅ 高さを固定\r\n          // contentHeight=\"1000px\" // ✅ 自動調整\r\n          // views={{\r\n          //   timeGridWeek: {\r\n          //     slotDuration: \"00:15:00\", \r\n          //   },\r\n          //   timeGridDay: {\r\n          //     slotDuration: \"00:15:00\",\r\n          //   }\r\n          // }}\r\n        />\r\n\r\n        {isOpen && (\r\n          <Modal\r\n            isOpen={isOpen}\r\n            onClose={() => setIsOpen(false)}\r\n            onSubmit={handleAddEvent}\r\n            onUpdate={handleUpdateEvent}\r\n            onDelete={handleDeleteEvent}\r\n            selectedRange={selectedRange}\r\n            selectedEvent={selectedEvent}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}